using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        int[,] FORWARD_DIRECTIONS = {
            {1, 2},
            {-1, 2},
            {2, 1},
            {-2, 1}
        };

        int[,] BACKWARD_DIRECTIONS = {
            { -1, -2 },
            { 1, -2 },
            { -2, -1 },
            { 2, -1 }
        };
        /**
         * @param grid: a chessboard included 0 and 1
         * @return: the shortest path
         */
        public int ShortestPath2(bool[][] grid) {
            // write your code here
            if (grid == null || grid.Length == 0)
                return -1;
            
            if (grid[0] == null || grid[0].Length == 0)
                return -1;

            int n = grid.Length;
            int m = grid[0].Length;


            if (grid[0][0] || grid[n - 1][m - 1])
                return -1;
            
            if (n == 1 && m == 1)
                return 0;

            Queue<Point> forwardQueue = new Queue<Point>();
            Queue<Point> backwardQueue = new Queue<Point>();
            bool[,] forwardVisited = new bool[n, m];
            bool[,] backwardVisited = new bool[n, m];

            forwardQueue.Enqueue(new Point(0, 0));
            forwardVisited[0, 0] = true;
            backwardQueue.Enqueue(new Point(n - 1, m - 1));
            backwardVisited[n - 1, m - 1] = true;
            int distance = 0;

            while (forwardQueue.Count > 0 && backwardQueue.Count > 0) {
                distance++;
                if (ExtendQueue(grid, forwardQueue, forwardVisited, FORWARD_DIRECTIONS, backwardVisited))
                    return distance;
                
                distance++;
                if (ExtendQueue(grid, backwardQueue, backwardVisited, BACKWARD_DIRECTIONS, forwardVisited))
                    return distance;
            }

            return -1;
        }
        
        private bool ExtendQueue(bool[][] grid, Queue<Point> queue, bool[,] visited, int[,] directions, bool[,] oppositeVisited) {
            int size = queue.Count;
            for (int i = 0; i < size; i++) {
                var current = queue.Dequeue();
                int x = current.x;
                int y = current.y;
                for (int j = 0; j < 4; j++) {
                    int newX = x + directions[j, 0];
                    int newY = y + directions[j, 1];

                    if (!IsValid(grid, newX, newY))
                        continue;
                    
                    if (visited[newX, newY])
                        continue;

                    if (oppositeVisited[newX, newY])
                        return true;
                    
                    queue.Enqueue(new Point(newX, newY));
                    visited[newX, newY] = true;
                }
            }

            return false;
        }

        private bool IsValid(bool[][] grid, int x, int y) {            
            int n = grid.Length;
            int m = grid[0].Length;

            if (x < 0 || x >= n || y < 0 || y >= m)
                return false;
            
            return !grid[x][y];
        }
    }
}