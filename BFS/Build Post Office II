using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {

        private int empty = 0;
        private int house = 1;
        private int wall = 2;
        private int minDistance = int.MaxValue;
        private int[] deltaX = {0, 1, -1, 0};
        private int[] deltaY = {1, 0, 0, -1};

        /**
         * @param grid: a 2D grid
         * @return: An integer
         */
        public int ShortestDistance(int[][] grid) {
            // write your code here
            if (grid == null || grid.Length == 0)
                return -1;
            
            if (grid[0] == null || grid[0].Length == 0)
                return -1;
            
            // BFS
            for (int i = 0; i < grid.Length; i++) {
                for (int j = 0; j < grid[0].Length; j++) {
                    if (grid[i][j] == empty) {
                        var distances = Bfs(grid, i, j);
                        minDistance = Math.Min(minDistance, GetDistance(grid, distances));
                    }
                }
            }

            return minDistance == int.MaxValue ? -1 : minDistance;
        }

        private int GetDistance(int[][] grid, Dictionary<int, int> distances) {
            int n = grid.Length;
            int m = grid[0].Length;
            int distance = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if (grid[i][j] != house)
                        continue;
                    
                    var index = i * m + j;
                    if (!distances.ContainsKey(index))
                        return int.MaxValue;
                    
                    distance += distances[index];
                }
            }

            return distance;
        }

        private Dictionary<int, int> Bfs(int[][] grid, int i, int j) {
            int n = grid.Length;
            int m = grid[0].Length;
            Dictionary<int, int> distances = new Dictionary<int, int>();
            Queue<int> queue = new Queue<int>();
            queue.Enqueue(i * m + j);
            distances[i * m + j] = 0;

            while (queue.Count > 0) {
                var current = queue.Dequeue();
                var x = current / m;
                var y = current % m;

                for (int d = 0; d < 4; d++) {
                    var newX = x + deltaX[d];
                    var newY = y + deltaY[d];

                    if (!IsValid(newX, newY, grid))
                        continue;
                    
                    var next = newX * m + newY;
                    if (distances.ContainsKey(next))
                        continue;

                    distances[next] = distances[current] + 1;
                    if (grid[newX][newY] == empty)
                        queue.Enqueue(next);
                }
            }

            return distances;
        }

        private bool IsValid(int x, int y, int[][] grid) {
            int n = grid.Length;
            int m = grid[0].Length;
            if (x < 0 || x >= n || y < 0 || y >= m)
                return false;
            
            if (grid[x][y] == wall)
                return false;

            return true;
        }
    }
}