using System;
using System.Collections.Generic;

public class Solution
{
    private class MazeType
    {
        public static int Wall = 1;
        public static int Space = 0;
    }

    int[] dx = { 0, 0, -1, 1 };
    int[] dy = { 1, -1, 0, 0 };

    public int ShortestDistance(int[][] maze, int[] start, int[] destination)
    {
        int n = maze.Length;
        int m = maze[0].Length;

        Queue<int> queue = new Queue<int>();
        int begin = start[0] * m + start[1];

        queue.Enqueue(begin);
        Dictionary<int, int> distance = new Dictionary<int, int>();
        distance[begin] = 0;
        int dest = destination[0] * m + destination[1];

        while (queue.Count > 0)
        {
            var cur = queue.Dequeue();
            int x = cur / m;
            int y = cur % m;
            
            for (int d = 0; d < 4; d++)
            {
                var (nx, ny, len) = KickBall(x, y, d, maze);
                int next = nx * m + ny;
                int nextLen = distance[cur] + len;
                if (distance.ContainsKey(next) && distance[next] <= nextLen)
                    continue;

                queue.Enqueue(next);
                distance[next] = nextLen;
            }
        }

        if (distance.ContainsKey(dest))
            return distance[dest];

        return -1;
    }

    private (int, int, int) KickBall(int x, int y, int direction, int[][] maze)
    {
        int n = maze.Length;
        int m = maze[0].Length;
        int len = 0;
        while (x >= 0 && x < n && y >= 0 && y < m && maze[x][y] == MazeType.Space)
        {
            x += dx[direction];
            y += dy[direction];
            len++;
        }
        x -= dx[direction];
        y -= dy[direction];
        len--;
        return (x, y, len);
    }
}

