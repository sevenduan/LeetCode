using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param n: The number of nodes
         * @param starts: One point of the edge
         * @param ends: Another point of the edge
         * @param lens: The length of the edge
         * @return: Return the length of longest path on the tree.
         */
        public int LongestPath(int n, int[] starts, int[] ends, int[] lens) {
            // Write your code here
            var graph = BuildGraph(n, starts, ends, lens);

            var (start, distince) = Bfs(0, graph);
            var (end, answer) = Bfs(start, graph);

            return answer;
        }

        private (int start, int distince) Bfs (int root, Dictionary<int, Dictionary<int, int>> graph) {
            Queue<int> queue = new Queue<int>();
            Dictionary<int, int> distinceToRoot = new Dictionary<int, int>();

            queue.Enqueue(root);
            distinceToRoot[root] = 0;
            
            int maxDistance = -1;
            int maxNode = -1;

            while (queue.Count > 0) {
                var index = queue.Dequeue();

                if (maxDistance < distinceToRoot[index]) {
                    maxDistance = distinceToRoot[index];
                    maxNode = index;
                }

                foreach (var item in graph[index]) {
                    int neighbor = item.Key;
                    int dist = item.Value;

                    if (distinceToRoot.ContainsKey(neighbor))
                        continue;
                    
                    queue.Enqueue(neighbor);
                    distinceToRoot[neighbor] = dist + distinceToRoot[index];
                }
            }

            return (maxNode, maxDistance);
        }

        public (int largest, int larger) GetLargestLarger(int a, int b, int c)
        {
            int largest = Math.Max(a, Math.Max(b, c));
            int third = Math.Min(a, Math.Min(b, c));
            int larger = a - largest + b - third + c;
            return (largest, larger);
        }

        private Dictionary<int, Dictionary<int, int>> BuildGraph(int n, int[] starts, int[] ends, int[] lens) {
            Dictionary<int, Dictionary<int, int>> graph = new Dictionary<int, Dictionary<int, int>>();
            for (int i = 0; i < n - 1; i++) {
                if (!graph.ContainsKey(starts[i])) {
                    graph[starts[i]] = new Dictionary<int, int>();
                }
                if (!graph.ContainsKey(ends[i])) {
                    graph[ends[i]] = new Dictionary<int, int>();
                }
                graph[starts[i]][ends[i]] = lens[i];
                graph[ends[i]][starts[i]] = lens[i];
            }
            return graph;
        }
    }
}