public class Solution {
    public bool SequenceReconstruction(int[] org, int[][] seqs) {
        Dictionary<int, HashSet<int>> graph = BuildGraph(seqs);
        List<int> topoOrder = GetTopoOrder(graph);

        if (topoOrder == null || topoOrder.Count != org.Length) {
            return false;
        }

        for (int i = 0; i < org.Length; i++) {
            if (org[i] != topoOrder[i]) {
                return false;
            }
        }
        return true;
    }

    private IList<int> GetTopoOrder(Dictionary<int, HashSet<int>> graph) {
        Dictionary<int, int> indegree = GetIndegree(graph);
        List<int> topoOrder = new List<int>();
        Queue<int> queue = new Queue<int>();

        foreach (var item in indegree) {
            if (item.Value == 0) {
                queue.Enqueue(item);
                topoOrder.Add(item);
            }
        }


        while (queue.Count > 0) {
            if (queue.Count > 1) {
                return null;
            }
            
            int node = queue.Dequeue();
            foreach (int neighbor in graph[node]) {
                indegree[neighbor] = indegree[neighbor] - 1;
                if (indegree[neighbor] == 0) {
                    queue.Enqueue(neighbor);
                    topoOrder.Add(neighbor);
                }
            }
        }

        if (graph.Count == topoOrder.Count) {
            return topoOrder;
        }
        
        return null;        
    }

    private Dictionary<int, int> GetIndegree(Dictionary<int, HashSet<int>> graph) {
        Dictionary<int, int> indegree = new Dictionary<int, int>();
        foreach (int key in graph.Keys) {
            indegree[key] = 0;
        }

        foreach (int key in graph.Keys) {
            foreach (int neighbor : graph[key]) {
                indegree[neighbor]++;
            }
        }
        return indegree;
    }

    private Dictionary<int, HashSet<int>> BuildGraph(int[][] seqs) {
        Dictionary<int, HashSet<int>> graph = new Dictionary<int, HashSet<int>>();
        foreach (var seq in seqs) {
            foreach (var item in seq) {
                if (!graph.ContainsKey(item))
                    graph[item] = new HashSet<int>();
            }
        }

        foreach (var seq : seqs) {
            for (int i = 1; i < seq.Length; i++) {
                graph[seq[i - 1]].Add(seq[i]);
            }
        }

        return graph;
    }
}