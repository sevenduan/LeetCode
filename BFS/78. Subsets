public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();

        if (nums == null || nums.Length == 0)
            return result;

        int index = 0;
        result.Add(new List<int>());
        while (index < result.Count) {
            var subset = result[index++];
            for (int i = 0; i < nums.Length; i++) {
                if (subset.Count != 0 && subset[subset.Count - 1] >= nums[i])
                    continue;
                
                List<int> newSubset = new List<int>(subset);
                newSubset.Add(nums[i]);
                result.Add(newSubset);
            }

        }

        return result;
    }
}

// another bfs
public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();

        if (nums == null || nums.Length == 0)
            return result;
    
        result.Add(new List<int>());
        
        foreach (var num in nums) {
            int size = result.Count;
            for (int i = 0; i < size; i++) {
                var subset = new List<int>(result[i]);
                subset.Add(num);
                result.Add(subset);
            }
        }
        return result;
    }
}