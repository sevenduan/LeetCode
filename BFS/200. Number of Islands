public class Solution {

    int[] deltaX = {0, 1, -1, 0};
    int[] deltaY = {1, 0, 0, -1};

    public int NumIslands(char[][] grid) {
        if (grid == null || grid.Length == 0)
            return 0;
        
        if (grid[0] == null || grid[0].Length == 0)
            return 0;
        
        int n = grid.Length;
        int m = grid[0].Length;
        bool[,] visited = new bool[n, m]; 
        int answer = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int index = i * m + j;
                if (grid[i][j] == '1' && !visited[i, j]) {
                    answer++;
                    BFS(grid, i, j, visited);
                }
            }
        }

        return answer;
    }

    private void BFS(char[][] grid, int row, int col, bool[,] visited) {
        int m = grid[0].Length;
        Queue<int> queue = new Queue<int>();
        queue.Enqueue(row * m + col);

        while (queue.Count > 0) {
            int index = queue.Dequeue();
            int x = index / m;
            int y = index % m;

            for (int i = 0; i < 4; i++) {
                int newX = x + deltaX[i];
                int newY = y + deltaY[i];

                if (isValid(grid, newX, newY, visited)) {
                    int newIndex = newX * m + newY;
                    queue.Enqueue(newIndex);
                    visited[newX, newY] = true;
                }
            }
        }
    }

    private bool isValid(char[][] grid, int row, int col, bool[,] visited)
    {
        int n = grid.Length;
        int m = grid[0].Length;

        if (row < 0 || row >=n || col < 0 || col >= m)
            return false;
        
        if (visited[row, col])
            return false;
        
        return grid[row][col] == '1';
    }
}