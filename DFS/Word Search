public class Solution {
    public bool Exist(char[][] board, string word) {
        if (board == null || board.Length == 0)
            return false;
        
        if (board[0] == null || board[0].Length == 0)
            return false;
        
        if (string.IsNullOrEmpty(word))
            return false;

        int n = board.Length;
        int m = board[0].Length;
        bool[] visited = new bool[n * m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == word[0]) {
                    int current = i * m + j;
                    visited[current] = true;
                    if (DFS(board, word, 0, i, j, n, m, visited)) 
                        return true;
                    
                    visited[current] = false;
                }
            }
        }

        return false;
    }

    private bool DFS(char[][] board, string word, int index, int x, int y, int n, int m, bool[] visited) {
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};

        if(index == word.Length - 1) {
            return true;
        }

        for (int i = 0; i < 4; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];
            if (!IsValid(board, word, index + 1, newX, newY, n, m))
                continue;

            int next = newX * m + newY;
            if (visited[next])
                continue;

            visited[next] = true;

            if (DFS(board, word, index + 1, newX, newY, n, m, visited))
                return true;
            
            visited[next] = false;
        }

        return false;
    }

    private bool IsValid(char[][] board, string word, int index, int x, int y, int n, int m) {
        if (x < 0 || x >= n || y < 0 || y >= m)
            return false;
        
        return board[x][y] == word[index];
    }
}