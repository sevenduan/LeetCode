public class Solution {
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {
        List<IList<int>> results = new List<IList<int>>();
        if (candidates == null || candidates.Length == 0) {
            return results;
        }

        Array.Sort(candidates);
        
        List<int> subset = new List<int>();
        Dfs(candidates, 0, target, subset, results);
        
        return results;
    }
    
    private void Dfs(int[] candidates, int index, int target, IList<int> subset, IList<IList<int>> results) {
        // match the target
        if (target == 0) {
            results.Add(new List<int>(subset));
            return;
        }

        for(int i = index; i < candidates.Length; i++) {
            if (i != index && candidates[i] == candidates[i - 1]) {
                continue;
            }

            if (target - candidates[i] < 0)
                break;

            subset.Add(candidates[i]);
            Dfs(candidates, i + 1, target - candidates[i], subset, results);
            subset.RemoveAt(subset.Count - 1);
        }        
    }
}