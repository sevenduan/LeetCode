public class Solution {
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {
        List<IList<int>> results = new List<IList<int>>();
        if (candidates == null || candidates.Length == 0) {
            return results;
        }

        Array.Sort(candidates);
        
        Dfs(candidates, 0, new List<int>(), target, results);
        
        return results;
    }
    
    private void Dfs(int[] candidates, int startIndex, IList<int> current, int remainTarget, IList<IList<int>> results) {
        // match the target
        if (remainTarget == 0) {
            results.Add(new List<int>(current));
            return;
        }
        // search
        for (int i = startIndex; i < candidates.Length; i++) {
            if (i != startIndex && candidates[i] == candidates[i - 1]) {
                continue;
            }
            if (remainTarget < candidates[i]) {
                break;
            }
            current.Add(candidates[i]);
            Dfs(candidates, i + 1, current, remainTarget - candidates[i], results);
            current.RemoveAt(current.Count - 1);
        }
    }
}