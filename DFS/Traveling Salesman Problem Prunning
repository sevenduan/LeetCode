using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Result {
        public int minCost;
        public Result(){
            this.minCost = 1000000;
        }
    }

    class Solution {
        /**
         * @param n: an integer,denote the number of cities
         * @param roads: a list of three-tuples,denote the road between cities
         * @return: return the minimum cost to travel all cities
         */
        public int MinCost(int n, int[][] roads) {
            // Write your code here
            var graph = BuildGraph(roads, n);

            HashSet<int> visited = new HashSet<int>();
            List<int> path = new List<int>();
            
            path.Add(1);
            visited.Add(1);
            Result result = new Result();

            Dfs(1, n, path, visited, 0, graph, result);
            return result.minCost;
        }

        private void Dfs(int city, int n, List<int> path, HashSet<int> visited, int cost, int[][] graph, Result result) {
            if (visited.Count == n) {
                result.minCost = Math.Min(result.minCost, cost);
                return ;
            }

            for(int i = 1; i < graph[city].Length; i++) {
                if (visited.Contains(i)) {
                    continue;
                }

                if (HasBetterPath(graph, path, i))
                {
                    continue;
                }
            
                visited.Add(i);
                path.Add(i);
                Dfs(i, n, path, visited, cost + graph[city][i], graph, result);
                visited.Remove(i);
                path.RemoveAt(path.Count - 1);
            }
        }

        // prunning
        // 1...A.B......Last.City > 1...A.Last.....B.City return true
        private bool HasBetterPath(int[][] graph, List<int> path, int city) {

            for (int i = 1; i < path.Count - 1; i++) {
                int a = path[i-1];
                int b = path[i];
                int last = path[path.Count - 1];

                if (graph[a][b] + graph[last][city] >
                        graph[a][last] + graph[b][city]) {
                    return true;
                }
            }
            return false;
        }

        private int[][] BuildGraph(int[][] roads, int n) {
            int[][] graph = new int[n + 1][];
            for (int i = 0; i < n + 1; i++)
            {
                graph[i] = new int[n + 1];
                for (int j = 0; j < n + 1; j++)
                {
                    graph[i][j] = 100000;
                }
            }

            int roadsLength = roads.Length;
            for (int i = 0; i < roadsLength; i++)
            {
                int a = roads[i][0], b = roads[i][1], c = roads[i][2];
                graph[a][b] = Math.Min(graph[a][b], c);
                graph[b][a] = Math.Min(graph[b][a], c);
            }

            return graph;
        }
    }
}