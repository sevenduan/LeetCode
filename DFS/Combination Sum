public class Solution {
    public IList<IList<int>> CombinationSum(int[] candidates, int target) {
        List<IList<int>> results = new List<IList<int>>();
        if (candidates == null || candidates.Length == 0) {
            return results;
        }

        int[] candidatesNew = RemoveDuplicates(candidates);
        
        Dfs(candidatesNew, 0, new List<int>(), target, results);
        
        return results;
    }

    private void Dfs(int[] candidatesNew, int index, IList<int> current, int remainTarget, IList<IList<int>> results) {
        // match the target
        if (remainTarget == 0) {
            results.Add(new List<int>(current));
            return;
        }
        // search
        for (int i = index; i < candidatesNew.Length; i++) {
            // 
            if (remainTarget < candidatesNew[i]) {
                break;
            }
            current.Add(candidatesNew[i]);
            Dfs(candidatesNew, i, current, remainTarget - candidatesNew[i], results);
            current.RemoveAt(current.Count - 1);
        }
    }

    private int[] RemoveDuplicates(int[] candidates) {
        Array.Sort(candidates);
        
        int index = 0;
        for (int i = 0; i < candidates.Length; i++) {
            if (candidates[i] != candidates[index]) {
                candidates[++index] = candidates[i];
            }
        }
        
        int[] nums = new int[index + 1];
        for (int i = 0; i < index + 1; i++) {
            nums[i] = candidates[i];
        }
        
        return nums;
    }
}