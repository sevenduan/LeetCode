/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int val=0, ListNode next=null) {
 *         this.val = val;
 *         this.next = next;
 *     }
 * }
 */
public class Solution {
    public ListNode MergeKLists(ListNode[] lists) {
        if (lists == null || lists.Length == 0)
            return null;
        
        return MergeHelper(lists, 0, lists.Length - 1);
    }

    private ListNode MergeHelper(ListNode[] lists, int start, int end) {
        if (start == end)
            return lists[start];

        int middle = start + (end - start) / 2;

        var left = MergeHelper(lists, start, middle);
        var right = MergeHelper(lists, middle + 1, end);

        return Merge(left, right);
    }

    private ListNode Merge(ListNode left, ListNode right) {
        var dummy = new ListNode(0);
        var current = dummy;
        
        while (left != null && right != null) {
            if (left.val <= right.val) {
                current.next = left;
                left = left.next;
            } else {
                current.next = right;
                right = right.next;
            }
            current = current.next;
        }

        if (left != null) {
            current.next = left;
        }

        if (right != null) {
            current.next = right;
        }

        return dummy.next;
    }
}