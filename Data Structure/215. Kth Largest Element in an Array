public class Solution {
    public int FindKthLargest(int[] nums, int k) {
        if (nums == null || nums.Length == 0)
            return 0;
        
        if (k < 0 || k > nums.Length)
            return 0;

        int left = 0;
        int right = nums.Length - 1;
        int target = nums.Length - k;

        while (true) {
            int p = Partition(nums, left, right);

            if (p == target)
                return nums[p];

            if (p < target)
                left = p + 1;
            else
                right = p - 1;
        }


        // if (k < nums.Length / 2) {
        //     return FindKthInMinHeap(nums, k);
        // } else {
        //     return FindNthInMaxHeap(nums, nums.Length - k + 1);
        // }
    }

    private int Partition(int[] nums, int left, int right) {
        if (left >= right)
            return right;
        
        int i = left + 1;
        int j = right;
        while (i <= j) {
            while (i <= j && nums[i] < nums[left])
                i++;
            while (i <= j && nums[j] > nums[left])
                j--;
                
            if (i <= j) {
                Swap(nums, i, j);
                i++;
                j--;
            }
        }
        Swap(nums, left, j);

        return j;
    }

    private void Swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }

    private int FindNthInMaxHeap(int[] nums, int n) {
        PriorityQueue<int, int> maxHeap = new PriorityQueue<int, int>(Comparer<int>.Create((x, y) => y.CompareTo(x)));

        foreach (var num in nums) {
            if (maxHeap.Count < n) {
                maxHeap.Enqueue(num, num);
            } else if (maxHeap.Peek() > num) {
                maxHeap.Dequeue();
                maxHeap.Enqueue(num, num);
            }
        }

        return maxHeap.Peek();
    }
    private int FindKthInMinHeap(int[] nums, int k) {

        PriorityQueue<int, int> minHeap = new PriorityQueue<int, int>();

        foreach (var num in nums) {
            if (minHeap.Count < k) {
                minHeap.Enqueue(num, num);
            } else if (minHeap.Peek() < num) {
                minHeap.Dequeue();
                minHeap.Enqueue(num, num);
            }
        }

        return minHeap.Peek();
    }
}