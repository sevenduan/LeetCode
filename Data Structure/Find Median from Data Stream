public class MedianFinder {
    private PriorityQueue<int, int> minHeap;
    private PriorityQueue<int, int> maxHeap;
    public MedianFinder() {
        minHeap = new PriorityQueue<int, int>();
        maxHeap = new PriorityQueue<int, int>(Comparer<int>.Create((x, y) => y.CompareTo(x)));
    }
    
    public void AddNum(int num) {
        if (maxHeap.Count == 0 || num <= maxHeap.Peek())
        {
            maxHeap.Enqueue(num, num);
        }
        else
        {
            minHeap.Enqueue(num, num);
        }

        // Balance the heaps
        if (maxHeap.Count > minHeap.Count + 1)
        {
            int number = maxHeap.Dequeue();
            minHeap.Enqueue(number, number);
        }
        else if (minHeap.Count > maxHeap.Count)
        {
            int val = minHeap.Dequeue();
            maxHeap.Enqueue(val, val);
        }
    }
    
    public double FindMedian() {        
        if (maxHeap.Count == minHeap.Count)
        {
            return (maxHeap.Peek() + minHeap.Peek()) / 2.0;
        }
        else
        {
            return maxHeap.Peek();
        }
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.AddNum(num);
 * double param_2 = obj.FindMedian();
 */