/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {        
        if (root == null)
            return "";
        StringBuilder sb = new StringBuilder();
        sb.Append(root.val + ",");
        sb.Append(serialize(root.left));
        sb.Append(serialize(root.right));
        return sb.ToString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {        
        if (data == "")
            return null;

        LinkedList<string> preorder = new LinkedList<string>(data.Split(','));

        return DesHelper(preorder, int.MinValue, int.MaxValue);
    }

    private TreeNode DesHelper(LinkedList<string> preorder, int left, int right) {
        if (preorder == null || preorder.Count == 0)
            return null;
        var str = preorder.First();
        if (string.IsNullOrEmpty(str))
            return null;
            
        int cur = int.Parse(preorder.First());

        if (cur < left || cur > right)
            return null;
        
        var root = new TreeNode(cur);
        preorder.RemoveFirst();
        root.left = DesHelper(preorder, left, cur);
        root.right = DesHelper(preorder, cur, right);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// String tree = ser.serialize(root);
// TreeNode ans = deser.deserialize(tree);
// return ans;