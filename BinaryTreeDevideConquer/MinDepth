/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param root: The root of binary tree
         * @return: An integer
         */
        public int MinDepth(TreeNode root) {
            // write your code here

            if (root == null) {
                return 0;
            }

            // If the current node is a leaf (has no children), return 1
            if (root.left == null && root.right == null) {
                return 1;
            }

            // Calculate the minimum depth of the left and right subtrees
            int leftDepth = (root.left != null) ? MinDepth(root.left) : int.MaxValue;
            int rightDepth = (root.right != null) ? MinDepth(root.right) : int.MaxValue;

            // Return the minimum depth of the current node
            return Math.Min(leftDepth, rightDepth) + 1;
        }
    }
}