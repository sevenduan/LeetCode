public class Solution {
    public int MaxProfit(int[] prices) {        
        if (prices == null || prices.Length == 0)
            return 0;

        int n = prices.Length;
        int max = 0;

        for (int i = 0; i < n; i++) {
            int left = GetMaxProfit(prices, 0, i);
            int right = GetMaxProfit(prices, i, n);
            max = Math.Max(max, left + right);
        }
        
        return max;
    }

    private int GetMaxProfit(int[] prices, int start, int end) {
        int min = int.MaxValue;
        int max = 0;
        for (int i = start; i < end; i++) {
            min = Math.Min(min, prices[i]);
            max = Math.Max(max, prices[i] - min);
        }

        return max;
    }
}

DP

public class Solution {
    public int MaxProfit(int[] prices) {        
        if (prices == null || prices.Length == 0)
            return 0;

        int n = prices.Length;

        int[,] dp = new int[3, n];

        for (int i = 1; i < 3; i++) {
            int maxDiff = -prices[0];
            for (int j = 1; j < n; j ++){              
                maxDiff = Math.Max(maxDiff, dp[i - 1, j - 1] - prices[j]);
                dp[i, j] = Math.Max(dp[i, j - 1], prices[j] + maxDiff);
            }
        }
        
        return dp[2, n - 1];
    }

    public class Solution {
    public int MaxProfit(int[] prices) {        
        if (prices == null || prices.Length == 0)
            return 0;

        int n = prices.Length;

        int[] dp = new int[4];
        dp[0] = int.MinValue; // buy
        dp[1] = 0; // sell
        dp[2] = int.MinValue; // buy
        dp[3] = 0; // sell
         
        for (int i = 0; i < n; i++){              
            dp[3] = Math.Max(dp[3], dp[2] + prices[i]);
            dp[2] = Math.Max(dp[2], dp[1] - prices[i]);
            dp[1] = Math.Max(dp[1], dp[0] + prices[i]);
            dp[0] = Math.Max(dp[0], -prices[i]);
        }
        
        return Math.Max(dp[1], dp[3]);
    }
}
}