using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param a: a list of integer
         * @param k: a integer
         * @param l: a integer
         * @return: return the maximum number of apples that they can collect.
         */
        public int PickApples(int[] a, int k, int l) {
            // write your code here
            if (a == null || a.Length == 0)
                return 0;
            
            int n = a.Length;
            if (k + l > n)
                return -1;
                
            int answer = int.MinValue;
            for (int i = 0; i < n; i++) {
                int leftK = GetMaxApples(a, 0, i, k);
                int rightL = GetMaxApples(a, i, n, l);
                int leftL = GetMaxApples(a, 0, i, l);
                int rightK = GetMaxApples(a, i, n, k);

                if (leftK != -1 && rightL != -1)
                    answer = Math.Max(answer, leftK + rightL);

                if (leftL != -1 && rightK != -1)
                    answer = Math.Max(answer, leftL + rightK);
            }

            return answer == int.MinValue? -1 : answer;
        }

        private int GetMaxApples(int[] a, int start, int end, int len) {            
            if (len > end - start)
                return -1;
                
            int apples = 0;
            int maxApples = 0;
            for (int i = start; i < start + len; i++) {
                apples += a[i];
            }
            maxApples = apples;

            int left = start; 
            int right = start + len;
            while (right < end) {
                apples = apples + a[right] - a[left];
                maxApples = Math.Max(maxApples, apples);
                left++;
                right++;
            }

            return maxApples;
        }
    }
}

// prefix Sum


using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param a: a list of integer
         * @param k: a integer
         * @param l: a integer
         * @return: return the maximum number of apples that they can collect.
         */
        public int PickApples(int[] a, int k, int l) {
            // write your code here
            if (a == null || a.Length == 0)
                return -1;
            
            int n = a.Length;
            if (k + l > n)
                return -1;

            int[] prefixSum = new int[n + 1];
            prefixSum[0] = 0;
            for (int i = 0; i < n; i++) {
                prefixSum[i + 1] = prefixSum[i] + a[i];
            }

            int[] prefixK = new int[n + 1];
            int[] prefixL = new int[n + 1];
            
            int[] postfixK = new int[n + 1];
            int[] postfixL = new int[n + 1];

            
            for (int i = 0; i < n + 1; i++) {
                if (i == k - 1) {
                    prefixK[i] = RangeSum(prefixSum, i - k + 1, i);
                }
                else if (i > k - 1) {
                    prefixK[i] = Math.Max(RangeSum(prefixSum, i - k + 1, i), prefixK[i - 1]);
                }
                if (i == l - 1) {
                    prefixL[i] = RangeSum(prefixSum, i - l + 1, i);
                }
                else if (i > l - 1) {
                    prefixL[i] = Math.Max(RangeSum(prefixSum, i - l + 1, i), prefixL[i - 1]);
                }
            } 

            for (int i = n; i >= 0; i--) {
                if (i + k - 1 == n) {
                    postfixK[i] = RangeSum(prefixSum, i, i + k - 1);
                }
                else if (i + k - 1 < n) {
                    postfixK[i] = Math.Max(RangeSum(prefixSum, i, i + k - 1), postfixK[i + 1]);
                }
                if (i + l - 1 == n) {
                    postfixL[i] = RangeSum(prefixSum, i, i + l - 1);
                }
                else if (i + l - 1 < n) {
                    postfixL[i] = Math.Max(RangeSum(prefixSum, i, i + l - 1), postfixL[i + 1]);
                }
            }
            
            int result = 0;
            for (int i = 0; i < n; i++) {
                result = Math.Max(result, prefixK[i] + postfixL[i + 1]);
                result = Math.Max(result, prefixL[i] + postfixK[i + 1]);
            }
            return result;
        }

        private int RangeSum(int[] prefixSum, int l, int r) {
            if (l == 0) {
                return prefixSum[r];
            }
            return prefixSum[r] - prefixSum[l - 1];
        }
    }
}