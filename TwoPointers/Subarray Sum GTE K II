using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param nums: an array of integers
         * @param s: An integer
         * @return: an integer representing the minimum size of subarray
         */
        public int MinimumSize(int[] nums, int s) {
            // write your code here
            if (nums == null || nums.Length == 0)
                return -1;
            
            int n = nums.Length;
            var prefixSum = GetPrefixSum(nums);
            int minLength = int.MaxValue;

            for (int start = 0; start < n; start++) {
                int end = GetEndOfSubArray(prefixSum, start, s);
                if (prefixSum[end + 1] - prefixSum[start] >= s) {
                    minLength = Math.Min(minLength, end - start + 1);
                }
            }

            return minLength == int.MaxValue ? -1 : minLength;
        }

        private int GetEndOfSubArray(int[] prefixSum, int start, int target) {
            int left = start;
            int right = prefixSum.Length - 2;
            while (left + 1 < right) {
                int mid = left + (right - left) / 2;
                if (prefixSum[mid + 1] - prefixSum [start] >= target)
                    right = mid;
                else
                    left = mid;
            }

            if (prefixSum[left + 1] - prefixSum[start] >= target)
                return left;
            
            return right;
        }


        private int[] GetPrefixSum(int[] nums) {
            int[] prefixSum = new int[nums.Length + 1];
            prefixSum[0] = 0;
            for (int i = 0; i < nums.Length; i++) {
                prefixSum[i + 1] = prefixSum[i] + nums[i];
            }
            
            return prefixSum;
        }
    }
}

// two pointers. O(N)
using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param nums: an array of integers
         * @param s: An integer
         * @return: an integer representing the minimum size of subarray
         */
        public int MinimumSize(int[] nums, int s) {
            // write your code here
            if (nums == null || nums.Length == 0)
                return -1;
            
            int n = nums.Length;
            int minLength = int.MaxValue;
            int sumOfSubArray = 0;
            int j = 0;

            for (int i = 0; i < n; i++) {
                while (j < n && sumOfSubArray < s) {
                    sumOfSubArray += nums[j];
                    j++;
                }
                if (sumOfSubArray >=s)
                    minLength = Math.Min(minLength, j - i);
                sumOfSubArray -= nums[i];
            }

            return minLength == int.MaxValue ? -1 : minLength;
        }
   }
}