public class Solution {
    private int[] dx = new int[8]{1, 1, -1, -1, 2, 2, -2, -2};
    private int[] dy = new int[8]{2, -2, 2, -2, 1, -1, 1, -1};
    private int mod = 1000000007;
    public int KnightDialer(int n) {
        if (n < 1)
            return 0;
        
        int[,] dp = new int [4, 3];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                dp[i, j] = 1;
            }
        }

        dp[3, 0] = 0;
        dp[3, 2] = 0;

        for (int k = 0; k < n - 1; k++) {
            int[,] newdp = new int [4, 3];
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 3; j++) {
                    if (dp[i, j] == 0)
                        continue;
                    
                    for (int d = 0; d < 8; d++) {
                        int x = i - dx[d];
                        int y = j - dy[d];

                        if (x <0 || x>= 4 || y < 0 || y >= 3)
                            continue;
                        
                        if (dp[x, y] == 0)
                            continue;
                        
                        newdp[i, j] = (dp[x, y] + newdp[i, j]) % mod;
                    }
                }
            }
            dp = newdp;           
        }

        int ans = 0;

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                ans = (ans + dp[i, j]) % mod;
            }
        }

        return ans;
    }
}