/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public List<int> ClosestKValue(TreeNode root, double target, int k) {        
        List<int> list = new List<int>();
        
        if (k == 0 || root == null) {
            return list;
        }

        InorderTraversal(root, list, target, k);
        
        return list;
    }

    private void InorderTraversal(TreeNode root, List<int> list, double target, int k) {
        if (root == null) {
            return;
        }
        
        InorderTraversal(root.left, list, target, k);
        
        if (list.Count < k) 
            list.Add(root.val);
        else if (Math.Abs(root.val - target) < Math.Abs(list[0] - target)) {
            list.RemoveAt(0);
            list.Add(root.val);
        } else return;

        InorderTraversal(root.right, list, target, k);
    }
}