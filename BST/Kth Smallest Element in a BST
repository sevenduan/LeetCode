/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int KthSmallest(TreeNode root, int k) {        
        Stack<TreeNode> stack = new Stack<TreeNode>();
        
        while (root != null) {
            stack.Push(root);
            root = root.left;
        }

        int i = 0;

        while (stack.Count > 0) {
            var curr = stack.Pop();
            i++;
            if (i == k)
                return curr.val;
            
            if (curr.right != null) {
                curr = curr.right;
                while (curr != null) {
                    stack.Push(curr);
                    curr = curr.left;
                }
            }
        }

        return -1;
    }
}

// recursion
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class Solution {
    public int KthSmallest(TreeNode root, int k) {
        if (root == null || k < 1)
            return -1;
                
        int cnt = CountNodes(root.left);

        if (k <= cnt)
            return KthSmallest(root.left, k);
        else if (k > cnt + 1)
            return KthSmallest(root.right, k - 1 - cnt);
        else
            return root.val;
    }

    int CountNodes(TreeNode root) {
        if (root == null) return 0;
        return CountNodes(root.left) + CountNodes(root.right) + 1;
    }
}