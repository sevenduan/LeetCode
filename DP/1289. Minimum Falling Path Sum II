public class Solution {
    public int MinFallingPathSum(int[][] grid) {
        int m = grid.Length;
        int n = grid[0].Length;

        int[][] dp = new int[m][];    
    
        dp[0] = grid[0];

        for (int i = 1; i < m; i++) {
            dp[i] = new int[n];
            int minValue = int.MaxValue;
            int minIndex = 0;
            int secMinValue = int.MaxValue;
            for (int j = 0; j < n; j++) {
                if (dp[i - 1][j] < minValue) {
                    secMinValue = minValue;
                    minValue = dp[i - 1][j];
                    minIndex = j;
                } else if (dp[i - 1][j] < secMinValue) {
                    secMinValue = dp[i - 1][j];
                }
            }

            for (int j = 0; j < n; j++) {
                if (j == minIndex) {
                    dp[i][j] = grid[i][j] + secMinValue;
                } else {
                    dp[i][j] = grid[i][j] + minValue;
                }
            }            
        }
        
        return dp[m - 1].Min();
    }
}

// rolling array

public class Solution {
    public int MinFallingPathSum(int[][] grid) {
        int m = grid.Length;
        int n = grid[0].Length;
    
        var dp = grid[0];

        for (int i = 1; i < m; i++) {
            int minValue = int.MaxValue;
            int minIndex = 0;
            int secMinValue = int.MaxValue;
            for (int j = 0; j < n; j++) {
                if (dp[j] < minValue) {
                    secMinValue = minValue;
                    minValue = dp[j];
                    minIndex = j;
                } else if (dp[j] < secMinValue) {
                    secMinValue = dp[j];
                }
            }

            for (int j = 0; j < n; j++) {
                if (j == minIndex) {
                    dp[j] = grid[i][j] + secMinValue;
                } else {
                    dp[j] = grid[i][j] + minValue;
                }
            }            
        }
        
        return dp.Min();
    }
}