using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param a: an integer array
         * @param v: an integer array
         * @param m: An integer
         * @return: an array
         */
        public int BackPackIII(int[] a, int[] v, int m) {
            // write your code here
            if (a == null || a.Length == 0 || v == null || v.Length == 0)
                return 0;
            
            int n = a.Length;

            int[,] dp = new int[n + 1, m + 1];
            dp[0, 0] = 0;

            for (int i = 1; i <= n; i ++) {
                for (int j = 0; j <= m; j++) {
                    if (j >= a[i - 1]) {
                        dp[i, j] = Math.Max(
                            dp[i - 1, j],
                            dp[i, j - a[i - 1]] + v[i - 1]
                        );
                    } else {
                        dp[i, j] = dp[i - 1, j];
                    }
                }
            }

            return dp[n, m];
        }
    }
}

// 2 D --> 1D
using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param a: an integer array
         * @param v: an integer array
         * @param m: An integer
         * @return: an array
         */
        public int BackPackIII(int[] a, int[] v, int m) {
            // write your code here
            if (a == null || a.Length == 0 || v == null || v.Length == 0)
                return 0;
            
            int n = a.Length;

            int[] dp = new int[m + 1];
            dp[0] = 0;

            for (int i = 0; i < n; i ++) {
                for (int j = 0; j <= m; j++) {
                    if (j >= a[i]) {
                        dp[j] = Math.Max(
                            dp[j],
                            dp[j - a[i]] + v[i]
                        );
                    }
                }
            }

            return dp[m];
        }
    }
}