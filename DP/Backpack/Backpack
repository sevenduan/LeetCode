using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param m: An integer m denotes the size of a backpack
         * @param a: Given n items with size A[i]
         * @return: The maximum size
         */
        public int BackPack(int m, int[] a) {
            // write your code here
            int n = a.Length;

            bool[,] dp = new bool[n + 1, m + 1];
            dp[0, 0] = true;

            for (int i = 1; i <= n; i++) {
                for (int j = 0; j <= m; j++) {
                    if (j >= a[i - 1]) {
                        dp[i, j] = dp[i - 1, j] || dp[i - 1, j - a[i - 1]];
                    } else {
                        dp[i, j] = dp[i - 1, j];
                    }
                }
            }

            for (int v = m; v >= 0; v--) {
                if (dp[n, v])
                    return v;
            }

            return 0;
        }
    }
}

// 2D -- > 1D:

using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param m: An integer m denotes the size of a backpack
         * @param a: Given n items with size A[i]
         * @return: The maximum size
         */
        public int BackPack(int m, int[] a) {
            // write your code here
            int n = a.Length;

            bool[] dp = new bool[m + 1];
            dp[0] = true;

            for (int i = 0; i < n; i++) {
                for (int j = m; j >= a[i]; j--) {
                    dp[j] = dp[j] || dp[j - a[i]];
                }
            }

            for (int v = m; v >= 0; v--) {
                if (dp[v])
                    return v;
            }

            return -1;
        }
    }
}