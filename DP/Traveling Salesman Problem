using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param n: an integer,denote the number of cities
         * @param roads: a list of three-tuples,denote the road between cities
         * @return: return the minimum cost to travel all cities
         */
        public int MinCost(int n, int[][] roads) {
            // Write your code here
            var graph = BuildGraph(roads, n);            
            int inf = 1000000;
            int stateSize = 1 << n;
            int[][] f = new int[stateSize][];
            // init
            for (int i = 0; i < stateSize; i++) {
                f[i] = new int[n + 1];
                for (int j = 0; j < n + 1; j++) {
                    f[i][j] = inf;
                }
            }
            f[1][1] = 0;

            for (int state = 1; state < stateSize; state++) {
                for (int i = 2; i < n + 1; i++) {
                    if ((state & (1 << (i - 1))) == 0) {
                        continue;
                    }

                    int prevState = state ^ (1 << (i - 1));
                    for (int j = 1; j <= n; j++) {
                        if ((prevState & (1 << (j - 1))) == 0) {
                            continue;
                        }

                        f[state][i] = Math.Min(f[state][i], f[prevState][j] + graph[j][i]);
                    }
                }
            }
            int minimalCost = inf;
            for (int lastCity = 1; lastCity < n + 1; lastCity++) {
                minimalCost = Math.Min(minimalCost, f[stateSize - 1][lastCity]);
            }

            return minimalCost;
        }

        private int[][] BuildGraph(int[][] roads, int n) {
            int[][] graph = new int[n + 1][];
            for (int i = 0; i < n + 1; i++)
            {
                graph[i] = new int[n + 1];
                for (int j = 0; j < n + 1; j++)
                {
                    graph[i][j] = 100000;
                }
            }

            int roadsLength = roads.Length;
            for (int i = 0; i < roadsLength; i++)
            {
                int a = roads[i][0], b = roads[i][1], c = roads[i][2];
                graph[a][b] = Math.Min(graph[a][b], c);
                graph[b][a] = Math.Min(graph[b][a], c);
            }

            return graph;
        }
    }
}