public class Solution {
    public bool IsMatch(string s, string p) {        
        if (s == null || p == null) {
            return false;
        }
        int n = s.Length;
        int m = p.Length;

        bool[,] dp = new bool[n + 1, m + 1];

        // dp[i, 0] = false;
        // dp[0, j] = true if p[0, j] = '*'
        dp[0, 0] = true;
        for (int j = 1; j < m + 1; j++) {
            if (p[j - 1] == '*')
                dp[0, j] = dp[0, j - 1];            
        }        
        
        for (int i = 1; i < n + 1; i++) {
            for (int j = 1; j < m + 1; j++) {
                if (p[j - 1] == '*') {
                    dp[i, j] = dp[i, j - 1] || dp[i - 1, j];
                } else {
                    dp[i, j] = dp[i - 1, j - 1] && IsMatch(s[i - 1], p[j - 1]);
                }
            }
        }

        return dp[n, m];
    }

    private bool IsMatch(char s, char p) {
        return s == p || p == '?';
    }
}

// Rolling Array
public class Solution {
    public bool IsMatch(string s, string p) {        
        if (s == null || p == null) {
            return false;
        }
        int n = s.Length;
        int m = p.Length;

        bool[,] dp = new bool[2, m + 1];

        // dp[i, 0] = false;
        // dp[0, j] = true if p[0, j] = '*'
        dp[0, 0] = true;
        for (int j = 1; j < m + 1; j++) {
            if (p[j - 1] == '*')
                dp[0, j] = dp[0, j - 1];            
        }        
        
        for (int i = 1; i < n + 1; i++) {
            dp[i % 2, 0] = false;
            for (int j = 1; j < m + 1; j++) {
                if (p[j - 1] == '*') {
                    dp[i % 2, j] = dp[i % 2, j - 1] || dp[(i - 1) % 2, j];
                } else {
                    dp[i % 2, j] = dp[(i - 1) % 2, j - 1] && IsMatch(s[i - 1], p[j - 1]);
                }
            }
        }

        return dp[n % 2, m];
    }

    private bool IsMatch(char s, char p) {
        return s == p || p == '?';
    }
}