public class Solution {
    public int MaxEnvelopes(int[][] envelopes) {        
        if (envelopes == null || envelopes.Length == 0)
            return 0;

        Array.Sort(envelopes, (a, b) => {
            if (a[0] != b[0])
                return a[0].CompareTo(b[0]);
            else
                return b[1].CompareTo(a[1]); // If widths are equal, sort by height in descending order
        });

        int n = envelopes.Length;
        int[] lis = new int[n + 1];

        lis[0] = int.MinValue;

        for (int i = 1; i < lis.Length; i++)
            lis[i] = int.MaxValue;

        int longest = 0;

        for (int i = 0; i < n; i++) {
            int index = FirstGTE(lis, envelopes[i][1]);
            lis[index] = envelopes[i][1];
            longest = Math.Max(longest, index);
        }

        return longest;
    }

    private int FirstGTE(int[] arr, int target) {
        int start = 0, end = arr.Length - 1;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] >= target)
                end = mid;
            else
                start = mid;
        }

        if (arr[start] >= target)
            return start;

        return end;
    }
}