using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        public static int[] deltaX = {2, 1, -1, -2};
        public static int[] deltaY = {-1, -2, -2, -1};
        /**
         * @param grid: a chessboard included 0 and 1
         * @return: the shortest path
         */
        public int ShortestPath2(bool[][] grid) {
            // write your code here
            if (grid == null || grid.Length == 0)
                return -1;
            
            if (grid[0] == null || grid[0].Length == 0)
                return -1;

            if (grid[0][0])
                return -1;

            int rows = grid.Length;
            int cols = grid[0].Length;

            int[,] dp = new int[rows, cols];
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < cols; j++) {
                    dp[i, j] = int.MaxValue;
                }
            }

            dp[0, 0] = 0;

            for (int j = 1; j < cols; j++) {
                for (int i = 0; i < rows; i++) {
                    if (grid[i][j])
                        continue;

                    for (int d = 0; d < 4; d++) {
                        int x = i + deltaX[d];
                        int y = j + deltaY[d];

                        if (x < 0 || x >= rows || y < 0  | y >= cols)
                            continue;
                        
                        if (dp[x, y] == int.MaxValue)
                            continue;
                        
                        dp[i, j] = Math.Min(dp[x, y] + 1, dp[i, j]);
                    }
                }
            }
        
            if (dp[rows - 1, cols - 1] == int.MaxValue)
                return -1;

            return dp[rows - 1, cols - 1];
        }
    }
}

// rolling array
using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        public static int[] deltaX = {2, 1, -1, -2};
        public static int[] deltaY = {-1, -2, -2, -1};
        /**
         * @param grid: a chessboard included 0 and 1
         * @return: the shortest path
         */
        public int ShortestPath2(bool[][] grid) {
            // write your code here
            if (grid == null || grid.Length == 0)
                return -1;
            
            if (grid[0] == null || grid[0].Length == 0)
                return -1;

            if (grid[0][0])
                return -1;

            int rows = grid.Length;
            int cols = grid[0].Length;

            int[,] dp = new int[rows, 3];
            for (int i = 0; i < rows; i++) {
                dp[i, 0] = int.MaxValue;
            }

            dp[0, 0] = 0;

            for (int j = 1; j < cols; j++) {
                for (int i = 0; i < rows; i++) {
                    dp[i, j % 3] = int.MaxValue;
                    if (grid[i][j])
                        continue;

                    for (int d = 0; d < 4; d++) {
                        int x = i + deltaX[d];
                        int y = j + deltaY[d];

                        if (x < 0 || x >= rows || y < 0  | y >= cols)
                            continue;
                        
                        if (dp[x, y % 3] == int.MaxValue)
                            continue;
                        
                        dp[i, j % 3] = Math.Min(dp[x, y % 3] + 1, dp[i, j % 3]);
                    }
                }
            }
        
            if (dp[rows - 1, (cols - 1) % 3] == int.MaxValue)
                return -1;

            return dp[rows - 1, (cols - 1) % 3];
        }
    }
}