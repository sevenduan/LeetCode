public class Solution {
    public int Rob(int[] nums) {
        // dp[i]
        // dp[i] = max(dp[i-1], dp[i-2] + A[i-1])
        if (nums == null || nums.Length == 0)
            return 0;
        
        if (nums.Length == 1)
            return nums[0];
        
        int n = nums.Length;
        int[] dp = new int[3];
        dp[0] = nums[0];
        dp[1] = Math.Max(dp[0], nums[1]);

        for (int i = 2; i < n; i++) {
            dp[i % 3] = Math.Max(dp[(i - 1) % 3], dp[(i - 2) % 3] + nums[i]);
        }

        return dp[(n - 1) % 3];
    }
}

------------

public class Solution {
    public int Rob(int[] nums) {
        if (nums == null || nums.Length == 0)
            return 0;
        
        if (nums.Length == 1)
            return nums[0];
        
        int n = nums.Length;
        int first = nums[0];
        int second = Math.Max(first, nums[1]);

        for (int i = 2; i < n; i++) {
            int temp = second;
            second = Math.Max(second, first + nums[i]);
            first = temp;
        }

        return second;
    }
}

---------
public class Solution {
    public int Rob(int[] nums) {        
        if (nums == null || nums.Length == 0)
            return 0;
        
        if (nums.Length == 1)
            return nums[0];
        
        if (nums.Length == 2)
            return Math.Max(nums[0], nums[1]);

        int n = nums.Length;

        return Math.Max(RobHelper(nums, 0, n - 2), RobHelper(nums, 1, n - 1));
    }

    private int RobHelper(int[] nums, int start, int end) {
        int first = nums[start];
        int second = Math.Max(first, nums[start + 1]);

        for (int i = start + 2; i <= end; i++) {
            int temp = second;
            second = Math.Max(second, first + nums[i]);
            first = temp;
        }

        return second;
    }
}