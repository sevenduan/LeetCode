public class Solution {
    public int FindKthLargest(int[] nums, int k) {
        if (nums == null || nums.Length == 0)
            return 0;

        if (k < 0 || k > nums.Length)
            return 0;


        return QuickSort(nums, 0, nums.Length - 1, k);
    }
    private int QuickSort(int[] nums, int left, int right, int k) {
        if (left <= right) {
            int p = Partion(nums, left, right);
            if (p == nums.Length - k) //change to find ()N-K)th smallest.
                return nums[p];
            else if (p > nums.Length - k)
                return QuickSort(nums, left, p - 1, k);
            else
                return QuickSort(nums, p + 1, right, k);
        }
        return -1;
    }

    private int Partion(int[] nums, int left, int right) {
        // Random random = new Random();
        // int randomNumber = random.Next(left, right + 1);
        // Swap(nums, left, randomNumber);
        if (left >= right)
            return right;

        int i = left + 1, j = right;
        while (i <= j) {
            while (i <= j && nums[i] < nums[left])
                i++;
            while (i <= j && nums[j] > nums[left])
                j--;

            if (i <= j) {
                Swap(nums, i, j);
                i++;
                j--;
            }
        }

        Swap(nums, left, j);
        return j;
    }

    private void Swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }
}