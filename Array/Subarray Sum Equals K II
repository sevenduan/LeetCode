using System;
using System.Collections;
using System.Collections.Generic;

namespace lintcode
{
    class Solution {
        /**
         * @param nums: a list of integer
         * @param k: an integer
         * @return: return an integer, denote the minimum length of continuous subarrays whose sum equals to k
         */
        public int SubarraySumEqualsKII(int[] nums, int k) {
            // write your code here
            if (nums == null || nums.Length == 0)
                return -1;
            
            int n = nums.Length;
            int[] prefixSum = new int[n + 1];
            prefixSum[0] = 0;
            Dictionary<int, int> sum2Index = new Dictionary<int, int>();
            sum2Index[0] = 0;
            for (int i = 0; i < n; i++) {
                int total = prefixSum[i] + nums[i];
                prefixSum[i + 1] = total;
                if (nums[i] == k)
                    return 1;
            }
            
            // loop end find prefixSum[start] = prefixSum[end + 1] - k;
            // use hash/dictionary to find prefixSum[end + 1] - k exists or not

            int answer = int.MaxValue;
            for (int end = 0; end < n; end++) {
                int target = prefixSum[end + 1] - k;
                if (sum2Index.ContainsKey(target)) {
                    int start = sum2Index[target];
                    answer = Math.Min(answer, end + 1 - start);
                }
                
                sum2Index[prefixSum[end + 1]] = end + 1;
            }

            return answer == int.MaxValue ? -1 : answer;
        }
    }
}